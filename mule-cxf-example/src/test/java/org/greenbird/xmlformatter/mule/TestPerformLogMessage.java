/*
 * Generated by the Mule project wizard. http://mule.mulesoft.org
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */
package org.greenbird.xmlformatter.mule;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.io.IOException;
import java.util.Properties;

import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
import com.greenbird.xmlns.schema.logger.LoggerPort;
import com.greenbird.xmlns.schema.logger.PerformLogMessageRequest;
import com.greenbird.xmlns.schema.logger.PerformLogMessageResponse;
import org.junit.Before;
import org.junit.Test;
import org.mule.tck.junit4.FunctionalTestCase;

public class TestPerformLogMessage extends FunctionalTestCase {
	
	private LoggerPort loggerService;
	
    @Override protected String getConfigResources() {
        return "mule-config.xml";
    }
    
    @Before
    public void createService() throws IOException {
    	Properties p = new Properties();
    	p.load(this.getClass().getClassLoader().getResourceAsStream("application.properties"));

    	loggerService = getService(LoggerPort.class, p.get("logger.inbound.url").toString());
    }

    @Test
    public void testLogging() throws Exception
    {
        PerformLogMessageRequest request = new PerformLogMessageRequest();
        request.setAddress("thomas.skjoelberg@greenbird.com");
        request.setSubject("Subject");
        request.setBody("Body");
        
        PerformLogMessageResponse performLogMessage = loggerService.performLogMessage(request);
        assertNotNull(performLogMessage);
        assertEquals(1, performLogMessage.getStatus());
    }
    
    @SuppressWarnings("unchecked")
	public static <T> T getService(Class<T> serviceClass, String url) {
        JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();

        factory.setAddress(url);
        factory.setServiceClass(serviceClass);
        
        //noinspection unchecked
        return (T) factory.create();
    }

}
